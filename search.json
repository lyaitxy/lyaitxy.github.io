[{"title":"git操作","date":"2022-10-19T11:08:07.101Z","url":"/2022/10/19/git-operate/","categories":[["undefined",""]],"content":"1.获取Git仓库的两种方式①将尚未进行版本控制的本地目录转换为Git仓库 在项目根目录中打开命令行，输入以下命令： ②从其他服务器克隆一个已存在的Git仓库 2.工作区中文件的四种状态以及操作状态 已被Git管理 未修改（Unmodified）：工作区中文件的内容和Git仓库中文件的内容保持一致 已修改（Modified）：工作区中文件的内容和Git仓库中文件的内容保持不一致 已暂存（Staged）：工作区中被修改的文件已被放到暂存区，准备将修改后的文件保存到Git仓库中 未被Git管理 未跟踪（Untracked）:不被Git所管理的文件 跟踪新文件 提交更新 3.检查文件的状态 4.修改已提交的文件并提交第一步 git add的三个功效： 可以用它开始跟踪新文件 把已跟踪的、且已修改的文件放到暂存区 把有冲突的文件标记为已解决状态 第二步 5.撤销对文件的修改 撤销操作的本质：用Git仓库中保存的文件，覆盖工作区中指定的文件 6.取消暂存的文件 7.移除文件 从Git仓库和工作区中同时移除对应的文件 只从Git仓库中移除指定的文件，但保留工作区中对应的文件 8.忽略文件创建一个名为.gitignore的配置文件，列出要忽略的文件的匹配模式 以 # 开头的是注释 以 &#x2F; 结尾的是目录 以 &#x2F; 开头防止递归 以 ！开头表示取反 可以使用glob模式进行文件和文件夹的匹配（glob 指简化了的正则表达式） 9.查看提交历史以及回退到指定的版本 10.Git与Github远程仓库的两种访问方式： Https：零配置；但是每次访问仓库时，需要重复输入Github的账号和密码才能访问成功 SSH：需要进行额外的配置；但是配置成功后，每次访问仓库时，不需要重复输入Github的账号和密码 基于HTTPS将本地仓库上传到Github 生成 SSH key 检查Github的SSH key是否配置成功 基于 SSH 将本地仓库上传到Github 11.git 分支操作 查看当前仓库的所有的分支列表 创建一个新分支 切换分支 创建一个分支并立即切换到分支上 合并分支 删除分支 遇到冲突时的分支合并 手动解决，解决后重新提交 将本地分支推送到远程仓库 查看远程仓库中所有的分支列表 跟踪远程分支 拉取远程分支的最新的代码 删除远程分支 "},{"title":"HelloWorld","date":"2022-10-19T10:50:59.000Z","url":"/2022/10/19/HelloWorld/","tags":[["fdfdsfsdfsdf","/tags/fdfdsfsdfsdf/"]],"categories":[["undefined",""]],"content":"fsfsdfsdfsdfadasdasdasf"},{"title":"Hello World","date":"2022-10-19T09:19:03.075Z","url":"/2022/10/19/hello-world/","categories":[["undefined",""]],"content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post More info: Writing Run server More info: Server Generate static files More info: Generating Deploy to remote sites More info: Deployment"}]